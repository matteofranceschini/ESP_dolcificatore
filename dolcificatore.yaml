esphome:
  name: dolcificatore_serra_laser
  platform: ESP32
  board: esp-wrover-kit
  #  platform: ESP8266
  #board: nodemcuv2 
wifi:
  ssid: !secret SSID
  password: !secret wifi_password
  #  use_address: 192.168.101.153
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dolcificatore Fallback Hotspot"
    password: !secret wifi_password 

captive_portal:

# Enable logging
logger:

    # Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

i2c:
       - sda: 21
         scl: 22
         id: bus_a
         frequency: 200khz
         scan: True
       - sda: 13
         scl: 16
         id: bus_b
         frequency: 200khz
         scan: True

#global variables used to customize the sensor                  

globals:
    #it's the distance from the sensor to the bottom of the container
    #value in cm because we do the conversion with the lambda
   - id: distance_from_empty
     type: float
     restore_value: yes
     initial_value: '78.0'
     #it's the distance from the sensor to the maximum fill of the container
     #or the minimum read that the sensor is able to do (mine is 20cm)
     #value is in cm because we do the conversion with the lambda
     #keep in mind that if you have a glass in front of the sensor you may 
     #adjust this value to correct the zero.
   - id: distance_from_full
     type: float
     restore_value: yes
     initial_value: '5.0'

sensor:
      - platform: wifi_signal
        name: "WiFi Signal Sensor"
        update_interval: 60s
      - platform: vl53l0x
        id: laser_1
        name: "Livello Sale 1"
        update_interval: 100ms
        filters:
            #i've put a glass in front of the sensor to protect it from the
            #salty vapors: this needs and adjustment in offset.
            # multiplication and divisions *100 are for centimeters conversion
          - offset: -0.15
          - sliding_window_moving_average:
              window_size: 100
              send_every: 20
          - lambda: return (id(distance_from_empty)/100.0-x)*100.0;
          - throttle: 1min
        unit_of_measurement: "cm"    
      - platform: vl53l0x
        id: laser_2
        name: "Livello sale 2"
        update_interval: 1s
        filters:
          - offset: -0.15
          - sliding_window_moving_average:
              window_size: 100
              send_every: 20
          - lambda: return (id(distance_from_empty)/100.0-x)*100.0;
          - throttle: 1min
        unit_of_measurement: "cm"    
      - platform: template
        name: "Livello Sale Percentuale"
        update_interval: 1s
        lambda: |-
            //this function will do the mean between the two values and provide
            //the percent of salt remaining in the container.
            return ((((id(laser_1).state)+id(laser_2).state)/2))*(100.0/(id(distance_from_empty)-id(distance_from_full)));
        unit_of_measurement: "%"   
      - platform: template
        name: "Sale Rimanente"
        id: salt_remaining
        unit_of_measurement: "kg"
        icon: "mdi:weight-kilogram"
        accuracy_decimals: 1
        filters:
          - sliding_window_moving_average:
              window_size: 15
              send_every: 6
        lambda: |-
          //12cm of salt are equivalent to 25kg of salt
          return ((((id(laser_1).state)+id(laser_2).state)/2)*2.083);
        update_interval: 10s
      - platform: template
        name: "Sale Rimanente Orario"
        id: hourly_salt_remaining
        unit_of_measurement: "kg"
        icon: "mdi:weight-kilogram"
        accuracy_decimals: 1
        filters:
            - throttle: 60min
            - sliding_window_moving_average:
                window_size: 30
                send_every: 1
        lambda: |-
            return id(salt_remaining).state;



switch:
  - platform: restart
    name: "ESP32 Restart"
# Enable Home Assistant API
api:
     password: !secret api_password

ota:
     safe_mode: True
     password: !secret ota_password

web_server:
  port: 80

